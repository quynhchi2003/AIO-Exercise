# -*- coding: utf-8 -*-
"""llm_rag

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YifJ_Q-xoEIVtWxLQGdSB09bS7ZlMX1K
"""

! pip install -q transformers==4.41.2
! pip install -q bitsandbytes==0.43.1
! pip install -q accelerate==0.31.0
! pip install -q langchain==0.2.5
! pip install -q langchainhub==0.1.20
! pip install -q langchain-chroma==0.1.1
! pip install -q langchain-community==0.2.5
! pip install -q langchain_huggingface==0.0.3
! pip install -q python-dotenv==1.0.1
! pip install -q pypdf==4.2.0
! pip install -q numpy>=1.25.0
!pip install -q chainlit==1.1.304
!pip install -g localtunnel
!pip install -q langchain-openai==0.1.9

import torch
from transformers import BitsAndBytesConfig
from transformers import AutoTokenizer, AutoModelForCausalLM, pipeline
from langchain_huggingface import HuggingFaceEmbeddings
from langchain_huggingface.llms import HuggingFacePipeline
from langchain.memory import ConversationBufferMemory
from langchain_community.chat_message_histories import ChatMessageHistory
from langchain_community.document_loaders import PyPDFLoader, TextLoader
from langchain.chains import ConversationalRetrievalChain
from langchain_chroma import Chroma
from langchain_text_splitters import RecursiveCharacterTextSplitter
from langchain_core.runnables import RunnablePassthrough
from langchain_core.output_parsers import StrOutputParser
from langchain import hub
import chainlit as cl
from chainlit.types import AskFileResponse

# Read PDF File
Loader = PyPDFLoader
FILE_PATH = '/content/YOLOv10_Tutorials.pdf'
loader = Loader(FILE_PATH)
documents = loader.load()

# Text splitter
text_splitter = RecursiveCharacterTextSplitter(chunk_size = 1000,
                                               chunk_overlap = 100)
docs = text_splitter.split_documents(documents)
print('Number of sub-documents:', len(docs))
print(docs[0])

# Vector database
embedding = HuggingFaceEmbeddings()
vector_db = Chroma.from_documents(docs, embedding)
retriever = vector_db.as_retriever()

# Test
result = retriever.invoke('What is YOLO?')
print('Number of relevant documents:', len(result))

MODEL_NAME = 'lmsys/vicuna-7b-v1.5'
# Quantization
nf4_config = BitsAndBytesConfig(
    load_in_4bit=True,
    bnb_4bit_use_double_quant=True,
    bnb_4bit_quant_type="nf4", #cai dat tham so luong tu hoa
    bnb_4bit_compute_dtype=torch.bfloat16
)
model = AutoModelForCausalLM.from_pretrained(
    MODEL_NAME,
    quantization_config=nf4_config,
    low_cpu_mem_usage=True
)
tokenizer = AutoTokenizer.from_pretrained(MODEL_NAME)
model_pipeline = pipeline(
    "text-generation",
    model=model,
    tokenizer=tokenizer,
    max_new_tokens=512, #max phan hoi
    pad_token_id=tokenizer.eos_token_id,
    device_map="auto"
)
llm = HuggingFacePipeline(pipeline=model_pipeline)

prompt = hub.pull('rlm/rag-prompt')
def format_docs(docs):
  return '\n\n'.join(doc.page_content for doc in docs)
rag_chain = (
    {'context': retriever | format_docs, 'question': RunnablePassthrough()}
    | prompt
    | llm
    | StrOutputParser()
)
USER_QUESTION = 'YOLOv10 la gi?'
output = rag_chain.invoke(USER_QUESTION)
answer = output.split('Answer:')[1].strip()
print(answer)

# Input preprocessing
def process_file(file: AskFileResponse):
  if file.type == 'text/plain':
    Loader = TextLoader
  elif file.type == 'application/pdf':
    Loader = PyPDFLoader
  loader = Loader(file.path)
  documents = loader.load()
  docs = text_splitter.split_documents(documents)
  for i, docs in enumerate(docs):
    doc.metadata['source'] = f'source_{i}'
  return docs

# Chroma database
def get_vector_db(file: AskFileResponse):
  docs = process_file(file)
  cl.user_session.set('docs', docs)
  vector_db = Chroma.from_documents(docs, embedding)
  return vector_db

def get_huggingface_llm(model_name: str = 'lmsys/vicuna-7b-v1.5',
                        max_new_tokens: int = 512):
  nf4_config = BitsAndBytesConfig(
      load_in_4bit=True,
      bnb_4bit_use_double_quant=True,
      bnb_4bit_quant_type="nf4", #cai dat tham so luong tu hoa
      bnb_4bit_compute_dtype=torch.bfloat16
  )
  model = AutoModelForCausalLM.from_pretrained(
      MODEL_NAME,
      quantization_config=nf4_config,
      low_cpu_mem_usage=True
  )
  tokenizer = AutoTokenizer.from_pretrained(MODEL_NAME)
  model_pipeline = pipeline(
      "text-generation",
      model=model,
      tokenizer=tokenizer,
      max_new_tokens=512, #max phan hoi
      pad_token_id=tokenizer.eos_token_id,
      device_map="auto"
  )
  llm = HuggingFacePipeline(pipeline=model_pipeline)
  return llm
LLM = get_huggingface_llm()

# Welcome message
welcome_message = '''Welcome to the PDF QA! To get started:
1. Upload a PDF or text file
2. Ask a question about the file
'''

@cl.on_chat_start
async def on_chat_start():
  files = None
  while files is None:
    files = await cl.AskFileMessage(
        content=welcome_message,
        accept=['text/plain', 'application/pdf'],
        max_size_mb=20,
        timeout=180,
    ).send()
    file = files[0]

    msg = cl.Message(content=f'Processing file {file.name}...',
                     disable_feedback=True)
    await msg.send()
    vector_db = await cl.make_async(get_vector_db)(file)

    message_history = ChatMessageHistory()
    memory = ConversationBufferMemory(memory_key='chat_history',
                                      output_key='answer',
                                      return_messages=True,
                                      chat_message_history=message_history)

    retriever = vector_db.as_retriever(search_type='mmr',
                                       search_kwargs={'k':3})
    chain = ConversationalRetrievalChain.from_llm(
        llm=LLM,
        chain_type='stuff',
        retriever=retriever,
        memory=memory,
        return_source_documents=True,
    )

    msg.content = f'{file_name} processed. You can now ask question!'
    await msg.update()

    cl.user_session.set('chain', chain)

@cl.on_message
async def on_message(message: cl.Message):
  chain = cl.user_session.get('chain')
  cb = cl.AsyncLangchainCallbackHandler()
  res = await chain.ainvoke(message.content, callbacks=[cb])
  answer = res['answer']
  source_document = res['source_documents']
  text_elements = []

  if source_documents:
    for source_idx, source_doc in enumerate(source_documents):
      source_name = f'source_{source_idx}'
      text_elements.append(
          cl.Text(content=source_doc.page_content, name=source_name)
      )
    source_names = [text_el.name for text_el in text_elements]
    if source_names:
      answer += f"\nSources: {', '.join(source_names)}"
    else:
      answer += '\nNo sources found'

  await cl.Message(content=answer, elements = text_elements).send()

!chainlit run app.py --host 0.0.0.0 --port 8000 &>/content/logs.txt &

import urllib

print('Password/Enpoint IP for localtunnel is:', urllib.request.urlopen('http://ipv4.icanhazip.com').read().decode('utf-8').strip('\n'))